<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OfficeLib</name>
    </assembly>
    <members>
        <member name="T:OfficeLib.FolderSearchOption">
            <summary>
            Specifies whether to search the current directory,
            or the current directory and all subdirectories.
            </summary>
        </member>
        <member name="F:OfficeLib.FolderSearchOption.AllFolders">
            <summary>
            Includes the current directory and all its subdirectories
            in a search operation.
            This option includes reparse points such as mounted drives
            and symbolic links in the search.
            </summary>
        </member>
        <member name="F:OfficeLib.FolderSearchOption.TopFolderOnly">
            <summary>
            Includes only the current directory in a search operation.
            </summary>
        </member>
        <member name="T:OfficeLib.MsoTriState">
            <summary>Office Boolean</summary>
        </member>
        <member name="F:OfficeLib.MsoTriState.msoTriStateToggle">
            <summary>Not supported</summary>
        </member>
        <member name="F:OfficeLib.MsoTriState.msoTriStateMixed">
            <summary>Not supported</summary>
        </member>
        <member name="F:OfficeLib.MsoTriState.msoTrue">
            <summary>True</summary>
        </member>
        <member name="F:OfficeLib.MsoTriState.msoFalse">
            <summary>False</summary>
        </member>
        <member name="F:OfficeLib.MsoTriState.msoCTrue">
            <summary>Not supported</summary>
        </member>
        <member name="T:OfficeLib.Excel.Cell`1">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.Value">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.RuledLine">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.BackgroundColor">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.ForegroundColor">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.Fomula">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Cell`1.FontSize">
            <summary></summary>
        </member>
        <member name="M:OfficeLib.Excel.Cell`1.#ctor">
            <summary></summary>
        </member>
        <member name="T:OfficeLib.Excel.Color">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Color.R">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Color.G">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Color.B">
            <summary></summary>
        </member>
        <member name="M:OfficeLib.Excel.Color.#ctor">
            <summary></summary>
        </member>
        <member name="M:OfficeLib.Excel.Color.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary></summary>
        </member>
        <member name="T:OfficeLib.Excel.Thickness">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Thickness.Left">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Thickness.Top">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Thickness.Right">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Thickness.Bottom">
            <summary></summary>
        </member>
        <member name="P:OfficeLib.Excel.Thickness.Values">
            <summary></summary>
        </member>
        <member name="M:OfficeLib.Excel.Thickness.#ctor">
            <summary></summary>
        </member>
        <member name="M:OfficeLib.Excel.Thickness.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary></summary>
            <param name="left"></param>
            <param name="top"></param>
            <param name="right"></param>
            <param name="bottom"></param>
        </member>
        <member name="T:OfficeLib.XLS.ExcelSheetAttribute">
            <summary>Excel sheet attribute</summary>
        </member>
        <member name="F:OfficeLib.XLS.ExcelSheetAttribute.DEF_ROW_MAX">
            <summary>Defeult : Row max value</summary>
        </member>
        <member name="F:OfficeLib.XLS.ExcelSheetAttribute.DEF_COL_MAX">
            <summary>Defeult : Column max value</summary>
        </member>
        <member name="P:OfficeLib.XLS.ExcelSheetAttribute.RowMax">
            <summary>Row max value</summary>
        </member>
        <member name="P:OfficeLib.XLS.ExcelSheetAttribute.ColMax">
            <summary>Column max value</summary>
        </member>
        <member name="M:OfficeLib.XLS.ExcelSheetAttribute.#ctor(OfficeLib.EnumSheetPermission)">
            <summary>Constructor</summary>
        </member>
        <member name="T:OfficeLib.XLS.ExcelExtention">
            <summary>Excel extention method class</summary>
        </member>
        <member name="M:OfficeLib.XLS.ExcelExtention.ToAddress(System.String)">
            <summary>
            Convert character string to cell address
            </summary>
            <param name="value">character string</param>
            <returns>Range class object</returns>
        </member>
        <member name="M:OfficeLib.XLS.ExcelExtention.ToExcelColumnString(System.Int32)">
            <summary>
            Convert numbers to strings in A1 format
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:OfficeLib.XLS.ExcelExtention.ToColumnNumber(System.String)">
            <summary>
            Convert column side strings to numbers
            </summary>
            <param name="value">column side strings</param>
            <returns></returns>
        </member>
        <member name="T:OfficeLib.XLS.Excel">
            <summary>
            Excel Class
            </summary>
            <remarks>
            Excel xxx Object Library wrapper.
            "xxx" is version.
            This library works with arbitrary version.
            "*.xls","*.xlsx","*.xlsm" ... etc
            </remarks>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROG_ID">
            <summary>Application object ID</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.OBJECT_WORKBOOKS">
            <summary>WorkBooks object ID</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.OBJECT_SHEET">
            <summary>Sheets object ID</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.OBJECT_CELL">
            <summary>Cells</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.OBJECT_RANGE">
            <summary>Range</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_VALUE">
            <summary>Value</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_VALUE2">
            <summary>Value2</summary>
            <remarks>
            The only difference between this property 
            and the Value property is that the Value2 property
            doesnâ€™t use the Currency and Date data types.
            You can return values formatted with
            these data types as floating-point numbers
            by using the Double data type.
            </remarks>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_TEXT">
            <summary>Text</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_FOMULA">
            <summary>Fomula</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_ROW">
            <summary>Row</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_COL">
            <summary>Column</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.PROP_SHEET_IN_NEW_WORKBOOK">
            <summary>SheetsInNewWorkbook</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.ARGS_OPEN">
            <summary>argument count of "Open" method</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.ROW">
            <summary>Row</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.COL">
            <summary>Columun</summary>
        </member>
        <member name="T:OfficeLib.XLS.Excel.XlCorruptLoad">
            <summary>XlCorruptLoad Enumeration</summary>
            <remarks>Specifies the processing for a file when it is opened.</remarks>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlCorruptLoad.xlNormalLoad">
            <summary>Workbook is opened normally.</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlCorruptLoad.xlRepairFile">
            <summary>Workbook is opened in repair mode.</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlCorruptLoad.xlExtractData">
            <summary>Workbook is opened in extract data mode.</summary>
        </member>
        <member name="T:OfficeLib.XLS.Excel.XlPlatform">
            <summary>XlPlatform Enumeration</summary>
            <remarks>Specifies the platform on which a text file originated.</remarks>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlPlatform.xlMacintosh">
            <summary>Macintosh</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlPlatform.xlMSDOS">
            <summary>MS-DOS</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlPlatform.xlWindows">
            <summary>Microsoft Windows</summary>
        </member>
        <member name="T:OfficeLib.XLS.Excel.XlGetValueFormat">
            <summary>XlGetValueType Enumeration</summary>
            <remarks>Specifies the format for retrieving values from a cell.</remarks>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlGetValueFormat.xlValue">
            <summary>Value</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlGetValueFormat.xlValue2">
            <summary>Floating-point numbers</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlGetValueFormat.xlText">
            <summary>Text</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel.XlGetValueFormat.xlFormula">
            <summary>Fomula</summary>
        </member>
        <member name="P:OfficeLib.XLS.Excel.Book">
            <summary>Book object</summary>
        </member>
        <member name="P:OfficeLib.XLS.Excel.Sheet">
            <summary>Sheet object</summary>
        </member>
        <member name="P:OfficeLib.XLS.Excel.CurrentSheetName">
            <summary>Current sheet name</summary>
        </member>
        <member name="F:OfficeLib.XLS.Excel._sheetNames">
            <summary>Sheet names (internal variable)</summary>
        </member>
        <member name="P:OfficeLib.XLS.Excel.SheetNames">
            <summary>Sheet names in the Book</summary>
        </member>
        <member name="M:OfficeLib.XLS.Excel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Excel.Open(System.String)">
            <summary>
            Excel file open
            </summary>
            <param name="file">File path</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.Open(System.Object[])">
            <summary>
            Excel file open (details)
            </summary>
            <param name="options">file open arguments</param>
            <remarks>
            Argument parameter details
            No, Argument,                    Optional,   Type
            01, FileName,                    true,       String
            02, UpdateLinks,                 true,       AutomationSecurity
            03, ReadOnly,                    true,       Boolean
            04, Format,                      true,       Int32(1[Tab] 2[,] 3[Speace] 4[;] 5[none] 6[custom])
            05, Password,                    true,       String
            06, WriteResPassword,            true,       String
            07, IgnoreReadOnlyRecommended,   true,       Boolean
            08, Origin,                      true,       XlPlatform(enum)
            09, Delimiter,                   true,       Char (If the format is of 6. Specify custom Delimiter)
            10, Editable,                    true,       Boolean
            11, Notify,                      true,       Boolean
            12, Converter,                   true,       FileConverters
            13, AddToMru,                    true,       Boolean
            14, Local,                       true,       Boolean
            15, CorruptLoad,                 true,       XlCorruptLoad(enum)
            
            See MSDN for further details.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SetOpenArguments(System.Object[])">
            <summary>
            Set Open Arguments
            </summary>
            <param name="args">Arguments</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.New(System.String)">
            <summary>
            Create a new Excel file
            </summary>
            <param name="file">File path</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.Close">
            <summary>
            Close Excel
            </summary>
            <remarks>
            It must be done at the end.
            If not called, the process will keep capturing the file.
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SelectSheet(System.String)">
            <summary>
            Select the Sheet
            </summary>
            <param name="sheetName">Sheet name</param>
            <returns>Success(true), Failure(false)</returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetWorkBookSheetNames">
            <summary>
            Get a list of sheet names
            </summary>
            <returns>Sheet names</returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.AddSheet(System.String)">
            <summary>
            Add the sheet
            </summary>
            <param name="sheetName">Sheet name</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.RemoveSheet(System.String)">
            <summary>
            Remove the sheet
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetCellValue(System.UInt32,System.UInt32,System.UInt32,System.UInt32,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            Get value from sheet
            </summary>
            <param name="startCol">Start column</param>
            <param name="startRow">Start row</param>
            <param name="endCol">End column</param>
            <param name="endRow">End row</param>
            <param name="referenceFormat">Cell value reference format</param>
            <remarks>
            Cell value options. [Value, Value2, Text, Fomula]
            
            example : Input "=DATE(2017,3,27)"
            value = 2017/03/27
            value2 = 42821
            Text = 27 March 2007
            Fomula = DATE(2017,3,27)
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetValue(System.Object,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            Get the value by reference format specification
            </summary>
            <param name="range">Object of the range to get the value</param>
            <param name="referenceFormat">Cell value reference format</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetCellValue(System.String,System.String,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            Get value from sheet
            </summary>
            <param name="startAdress">Start adress</param>
            <param name="endAdress">End adress</param>
            <param name="referenceFormat">Cell value reference type</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SetCellValue(System.Object[0:,0:],System.String,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary> 
            Set value to sheet
            </summary>
            <param name="values">Setting values</param>
            <param name="startCell">Start Address</param>
            <param name="referenceFormat">Cell value reference format</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SetCellValue(System.Object[0:,0:],System.UInt32,System.UInt32,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary> 
            Set value to sheet
            </summary>
            <param name="values">Setting values</param>
            <param name="startRow">Start row</param>
            <param name="startCol">Start column</param>
            <param name="referenceFormat">Cell value reference format</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SetCellValue(System.Object[0:,0:],System.String,System.String,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            Set value to sheet
            </summary>
            <param name="values">Setting values</param>
            <param name="startAddressString">Start Address</param>
            <param name="endAddressString">End Address</param>
            <param name="referenceFormat">Cell value reference format</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SetCellValue(System.Object[0:,0:],System.UInt32,System.UInt32,System.UInt32,System.UInt32,OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            Set value to sheet
            </summary>
            <param name="values">Setting values</param>
            <param name="startRow">Start row</param>
            <param name="startCol">Start column</param>
            <param name="endRow">End row</param>
            <param name="endCol">End column</param>
            <param name="referenceFormat">Cell value reference format</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetSetFormat(OfficeLib.XLS.Excel.XlGetValueFormat)">
            <summary>
            
            </summary>
            <param name="referenceFormat"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Excel.Save">
            <summary>
            Save
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Excel.SaveAs(System.String)">
            <summary>
            Save As
            </summary>
            <param name="file">Save file path</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.ConvertSetValue``1(``0[][])">
            <summary>Convert Jag Array to Rectangular Array</summary>
            <param name="src">Jag Array</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.GetRange(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>Get Cell range</summary>
            <param name="startRow">Start row</param>
            <param name="startCol">Start column</param>
            <param name="endRow">End row</param>
            <param name="endCol">End colmun</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.ReplaceNullValue(System.Object[0:,0:],System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Display blanks instead of "N / A".
            </summary>
            <param name="values">source values</param>
            <param name="startRow">Start row</param>
            <param name="startCol">Start column</param>
            <param name="endRow">End row</param>
            <param name="endCol">End colmun</param>
        </member>
        <member name="M:OfficeLib.XLS.Excel.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:OfficeLib.XLS.Field`1">
            <summary>
            Table using jagged array
            </summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Column">
            <summary>Table Column length</summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Row">
            <summary>Table Row length</summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Data">
            <summary>Table data</summary>
            <remarks>
            Like a rectangular array, Each element has the same length
            </remarks>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.StartAddress">
            <summary>Starting position of Location(Left Top)</summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.EndAddress">
            <summary>Ending position of Location(Right Bottom)</summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.#ctor(`0[][])">
            <summary>
            Constructor
            </summary>
            <param name="value">Data handled as a table</param>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.#ctor(`0[][],OfficeLib.XLS.Address)">
            <summary>
            Constructor
            </summary>
            <param name="value">Data handled as a table</param>
            <param name="startAddress">Start address</param>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.#ctor(`0[0:,0:])">
            <summary>
            Constructor
            </summary>
            <param name="value">Data handled as a table</param>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.#ctor(`0[0:,0:],OfficeLib.XLS.Address)">
            <summary>
            Constructor
            </summary>
            <param name="value">Data handled as a table</param>
            <param name="startAddress">Start address</param>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.RectToJag(`0[0:,0:])">
            <summary>
            Rect array to jag array
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.SetProperties(`0[][],OfficeLib.XLS.Address)">
            <summary>
            Set values of Constructor
            </summary>
            <param name="value"></param>
            <param name="address"></param>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Item(System.Int32)">
            <summary>
            Get by specifying the row of the table
            </summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Item(OfficeLib.XLS.Address)">
            <summary>
            Get the cell Value
            </summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Item(System.String)">
            <summary>
            Get the cell Value
            </summary>
        </member>
        <member name="P:OfficeLib.XLS.Field`1.Item(OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>
            Get the cell Value and Set the cell Value
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_BitwiseAnd(OfficeLib.XLS.Field{`0},OfficeLib.XLS.Field{`0})">
            <summary>
            Joining tables(Horizontally)
            </summary>
            <remarks>Based on the less row</remarks>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_BitwiseOr(OfficeLib.XLS.Field{`0},OfficeLib.XLS.Field{`0})">
            <summary>
            Joining tables(Horizontally)
            </summary>
            <remarks>Based on the one with more rows</remarks>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_Addition(OfficeLib.XLS.Field{`0},OfficeLib.XLS.Field{`0})">
            <summary>
            Joining tables(vertically)
            </summary>
            <remarks>Based on the one with more Columns</remarks>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_LeftShift(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Delete columns of the table from the right
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_RightShift(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Delete columns of the table from the left
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_Subtraction(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Delete columns of the table from the top
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_ExclusiveOr(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Delete columns of the table from the bottom
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_Division(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Vertical segmentation of Tables
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_Modulus(OfficeLib.XLS.Field{`0},System.Int32)">
            <summary>
            Horizontal segmentation of Tables
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.op_Explicit(`0[][])~OfficeLib.XLS.Field{`0}">
            <summary>
            Cast
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.TakeVerticalField(System.Int32,System.Int32)">
            <summary>
            Vertical segmentation of Table, and get the table
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.TakeVertical(System.Int32)">
            <summary>
            Extract values vertically from the table
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.Convert``1">
            <summary>
            Convert table contents to specified type
            </summary>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:OfficeLib.XLS.Field`1.GetCellValue(OfficeLib.XLS.Address)">
            <summary>
            Get the cell Value
            </summary>
        </member>
        <member name="T:OfficeLib.XLS.Address">
            <summary>Cell address class</summary>
        </member>
        <member name="F:OfficeLib.XLS.Address.ALPHABET_CNT">
            <summary>Number of characters from alphabet A to Z</summary>
        </member>
        <member name="F:OfficeLib.XLS.Address.A_OFFSET_NUM">
            <summary>Offset at alphabet conversion</summary>
        </member>
        <member name="F:OfficeLib.XLS.Address.MAX_ROW">
            <summary>Max of row number(2007-)</summary>
        </member>
        <member name="F:OfficeLib.XLS.Address.MAX_COLUMN">
            <summary>Max of column number(2007-)</summary>
        </member>
        <member name="P:OfficeLib.XLS.Address.ReferenceString">
            <summary>a1 format string</summary>
        </member>
        <member name="P:OfficeLib.XLS.Address.Column">
            <summary>Column number</summary>
        </member>
        <member name="P:OfficeLib.XLS.Address.Row">
            <summary>Row number</summary>
        </member>
        <member name="M:OfficeLib.XLS.Address.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="address">cell address string</param>
        </member>
        <member name="M:OfficeLib.XLS.Address.#ctor(System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="column"></param>
            <param name="row"></param>
        </member>
        <member name="M:OfficeLib.XLS.Address.Shift(System.Int32,System.Int32)">
            <summary>
            Shift cell address
            </summary>
            <param name="col">Amount of movement in the column direction</param>
            <param name="row">Amount of movement in the row direction</param>
        </member>
        <member name="M:OfficeLib.XLS.Address.ToString">
            <summary>
            Returns a character string of this range
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.Address.Shift(OfficeLib.XLS.Address,System.Int32,System.Int32)">
            <summary>
            Shifts from the original address to get a new address.
            </summary>
            <param name="address">Range object</param>
            <param name="col">Amount of movement in the column direction</param>
            <param name="row">Amount of movement in the row direction</param>
        </member>
        <member name="M:OfficeLib.XLS.Address.ToExcelColumnString(System.UInt32)">
            <summary>
            Convert numbers to strings in A1 format
            </summary>
            <param name="value">Value to convert</param>
        </member>
        <member name="M:OfficeLib.XLS.Address.ToColumnNumber(System.String)">
            <summary>
            Convert column side strings to numbers
            </summary>
            <param name="columnString">column side strings</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.ToAddressItems(System.String)">
            <summary>
            Convert character string to cell Items
            </summary>
            <param name="value">cell address string</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.SplitRC(System.String)">
            <summary>
            Split into rows and columns(A1 format)
            </summary>
            <param name="cellAddress"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.ConvertString(System.UInt32,System.Collections.Generic.Queue{System.Char})">
            <summary>
            Convert strings
            </summary>
            <param name="returnValue">recursive call value(default value 0)</param>
            <param name="charQueue">char array</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.CalcDesimal(System.Char,System.Int32)">
            <summary>
            Value calculation for character code conversion
            </summary>
            <param name="charVal">charactor</param>
            <param name="count">process count</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.LimitRowAdjustment(System.UInt32)">
            <summary>
            Limit check of row
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.Address.LimitColumnAdjustment(System.UInt32)">
            <summary>
            Limit check of row
            </summary>
            <param name="column"></param>
            <returns></returns>
        </member>
        <member name="T:OfficeLib.XLS.WorkBook">
            <summary>Excel Workbook class</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkBook.Name">
            <summary>Book name</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkBook.Path">
            <summary>Book paht</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkBook.WorkSheets">
            <summary>Book has Sheets List</summary>
        </member>
        <member name="F:OfficeLib.XLS.WorkBook._sheetNames">
            <summary>(private variable) sheet names</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkBook.SheetNames">
            <summary>Book has sheet names</summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="filePath">Fike path</param>
        </member>
        <member name="P:OfficeLib.XLS.WorkBook.Item(System.String)">
            <summary>Retrieve sheet object from sheet name</summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.Read">
            <summary>
            Read all the sheets in the book
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.Read(System.String)">
            <summary>
            Read sheet specification
            </summary>
            <param name="sheetName">Sheet name</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.ReadPreset">
            <summary>
            Read preset sheets
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.CanRead(OfficeLib.XLS.Excel,OfficeLib.XLS.WorkSheet)">
            <summary>
            Confirm whether it is readable
            </summary>
            <param name="excel">Excel instance</param>
            <param name="sheet">Sheet instance</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.WriteBook">
            <summary>
            Batch Writing of Book
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.WriteSheet(System.String)">
            <summary>
            Write sheet specification
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.CanWrite(OfficeLib.XLS.Excel,OfficeLib.XLS.WorkSheet)">
            <summary>
            Confirm whether it is writable
            </summary>
            <param name="excel">Excel instance</param>
            <param name="sheet">Sheet instance</param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.AddSheet``1(``0)">
            <summary>
            Add sheet
            </summary>
            <param name="sheet">Sheet instance</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.AddRangeSheet``1(``0[])">
            <summary>
            Add multiple sheets
            </summary>
            <param name="sheets">Sheet array</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkBook.GetKeys">
            <summary>
            Get this worksheet names
            </summary>
        </member>
        <member name="T:OfficeLib.XLS.WorkSheet">
            <summary>Worksheet class</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Name">
            <summary>Sheet name</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Tables">
            <summary>Tables defined in the sheet</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.EntireField">
            <summary>The entire loaded field</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.MaxRow">
            <summary>Max row</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.MaxColumn">
            <summary>Max column</summary>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.TableNames">
            <summary>Name list from tables defined</summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.#ctor(System.String,OfficeLib.XLS.Address)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="endAddress"></param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="endAddress"></param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.#ctor(System.String,System.String,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="name"></param>
            <param name="maxColumns"></param>
            <param name="maxRows"></param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.#ctor(System.String,System.UInt32,System.UInt32)">
            <summary>
            Constructor
            </summary>
            <param name="name">Sheet name</param>
            <param name="maxColumns"></param>
            <param name="maxRows"></param>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Item(System.Int32)">
            <summary>Get row</summary>
            <param name="row">Row number of the sheet</param>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Item(OfficeLib.XLS.Address)">
            <summary>Get cell value</summary>
            <param name="address">Sheet address</param>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Item(OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>Get Values in the specified range</summary>
            <param name="startAddress">Start cell</param>
            <param name="endAddress">End cell</param>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Item(System.String,System.String)">
            <summary>Get Values in the specified range</summary>
            <param name="startAddrStr">Start cell</param>
            <param name="endAddrStr">End cell</param>
        </member>
        <member name="P:OfficeLib.XLS.WorkSheet.Item(System.String)">
            <summary>Get table</summary>
            <param name="tableName">Table name</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.Read(OfficeLib.XLS.Excel)">
            <summary>
            Read the sheet
            </summary>
            <param name="excel">Excel instance</param>
            <remarks>
            Field size Default(1000 x 1000)
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.GetTable(OfficeLib.XLS.Excel,OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>
            Get table from its own field
            </summary>
            <param name="excel">Excel instance</param>
            <param name="startAddress">Satart Position</param>
            <param name="endAddress">End Position</param>
            <returns>Field Data</returns>
            <remarks>
            Get value from excel instance
            Since it is acquired directly from Excel, 
            it can be obtained freely if it is within the allowable range of Excel
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.GetTable(OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>
            Get table from its own field
            </summary>
            <param name="startAddress">Satart Position</param>
            <param name="endAddress">End Position</param>
            <returns>Field Data</returns>
            <remarks>
            * Points to note when specifying the range.
            It will never be acquired beyond the scope of the Field variable that is acquired in advance
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.GetTable(System.String,System.String)">
            <summary>
            Get table from its own field
            </summary>
            <param name="startAddrStr">Satart Position</param>
            <param name="endAddrStr">End Position</param>
            <returns>Table data</returns>
            <remarks>
            * Points to note when specifying the range.
            It will never be acquired beyond the scope of the Field variable that is acquired in advance
            </remarks>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.UpdateTableFromField">
            <summary>
            Update the Table from the Field
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.UpdateFieldFromTable">
            <summary>
            Update the Field from the Table
            </summary>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.Write(OfficeLib.XLS.Excel)">
            <summary>
            Write to Excel
            </summary>
            <param name="excel">Excel instance</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.Write``1(OfficeLib.XLS.Excel,``0[][],OfficeLib.XLS.Address)">
            <summary>
            Write to Excel
            </summary>
            <typeparam name="T"></typeparam>
            <param name="excel">Excel instance</param>
            <param name="value">Setting value</param>
            <param name="startAddress">Satart Position</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.SetTable``1(OfficeLib.XLS.Excel,``0[][],OfficeLib.XLS.Address)">
            <summary>
            Table data setting
            </summary>
            <typeparam name="T"></typeparam>
            <param name="excel">Excel instance</param>
            <param name="value">Setting value</param>
            <param name="startAddress">Satart Position</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.SetTable``1(OfficeLib.XLS.Excel,``0[][],OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>
            Table data setting
            </summary>
            <typeparam name="T"></typeparam>
            <param name="excel">Excel instance</param>
            <param name="value">Setting value</param>
            <param name="startAddress">Satart Position</param>
            <param name="endAddress">End Position</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.AddTable(System.String,OfficeLib.XLS.Field{System.Object})">
            <summary>Add table</summary>
            <param name="key">Table name</param>
            <param name="table">Table data</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.AddTable(System.String,OfficeLib.XLS.Address,OfficeLib.XLS.Address)">
            <summary>Add table</summary>
            <param name="key">Table name</param>
            <param name="startAddress">Start Position</param>
            <param name="endAddress">End Position</param>
        </member>
        <member name="M:OfficeLib.XLS.WorkSheet.AddTable(System.String,System.String,System.String)">
            <summary>Add table</summary>
            <param name="key">Table name</param>
            <param name="startAddress">Start Position(String)</param>
            <param name="endAddress">End Position(String)</param>
        </member>
        <member name="T:OfficeLib.EML.EMail">
            <summary>
            E-Mail Class
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.Subject">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.From">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.To">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.CC">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.BCC">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.SendDate">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.Body">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.EMail.HasAttachements">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeLib.EML.EMail.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeLib.EML.EMail.#ctor(System.Object)">
            <summary>
            
            </summary>
            <param name="mailItem"></param>
        </member>
        <member name="T:OfficeLib.EML.MailAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.MailAddress.DisplayName">
            <summary>
            
            </summary>
        </member>
        <member name="P:OfficeLib.EML.MailAddress.Address">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeLib.EML.MailAddress.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="address"></param>
        </member>
        <member name="M:OfficeLib.EML.MailAddress.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="address"></param>
            <param name="name"></param>
        </member>
        <member name="T:OfficeLib.EML.Outlook">
            <summary>
            
            </summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.PROG_ID">
            <summary>Application object ID</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.METHOD_GET_NAMESPACE">
            <summary>Command of GetNamespace</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.METHOD_GET_DEFAULT_FOLDER">
            <summary>Command of GetNamespace</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.METHOD_RESTRICT">
            <summary>Command of Restrict</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.PROP_UNREAD_ITEM_COUNT">
            <summary>Unread item count</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.PROP_FOLDERS">
            <summary>Folders</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.PROP_SUBJECT">
            <summary></summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.ARG_MAPI">
            <summary></summary>
        </member>
        <member name="T:OfficeLib.EML.Outlook.OlDefaultFolders">
            <summary>Specifies the folder type for a specified folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderCalendar">
            <summary>The Calendar folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderConflicts">
            <summary>The Conflicts folder (subfolder of the Sync Issues folder)  Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderContacts">
            <summary>The Contacts folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderDeletedItems">
            <summary>The Deleted Items folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderDrafts">
            <summary>The Drafts folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderInbox">
            <summary>The Inbox folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderJournal">
            <summary>The Journal folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderJunk">
            <summary>The Junk E-Mail folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderLocalFailures">
            <summary>The Local Failures folder (subfolder of the Sync Issues folder)  Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderManagedEmail">
            <summary>The top-level folder in the Managed Folders group. For more information on Managed Folders, see the Help in Microsoft Outlook. Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderNotes">
            <summary>The Notes folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderOutbox">
            <summary>The Outbox folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderSentMail">
            <summary>The Sent Mail folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderServerFailures">
            <summary>The Server Failures folder (subfolder of the Sync Issues folder)  Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderSuggestedContacts">
            <summary>The Suggested Contacts folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderSyncIssues">
            <summary>The Sync Issues folder. Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderTasks">
            <summary>The Tasks folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderToDo">
            <summary>The To Do folder</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olPublicFoldersAllPublicFolders">
            <summary>The All Public Folders folder in the Exchange Public Folders store.Only available for an Exchange account</summary>
        </member>
        <member name="F:OfficeLib.EML.Outlook.OlDefaultFolders.olFolderRssFeeds">
            <summary>The RSS Feeds folder</summary>
        </member>
        <member name="M:OfficeLib.EML.Outlook.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OfficeLib.EML.Outlook.Open(System.String)">
            <summary>
            Open E-Mail
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.Connect">
            <summary>
            Connect to Outlook
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.Close">
            <summary>
            Close Outlook
            </summary>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetItemCount">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetInboxFolders">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetInboxMails">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetFolder(OfficeLib.EML.Outlook.OlDefaultFolders)">
            <summary>
            
            </summary>
            <param name="folderType"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetMails(System.Object)">
            <summary>
            Todo : Mail 
            </summary>
            <param name="folder"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetUnreadCount(OfficeLib.FolderSearchOption)">
            <summary>
            Get the number of unread counts in inbox
            </summary>
            <returns>Unread mail count</returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.GetUnreadCount(System.String)">
            <summary>
            Get the number of unread counts in specified folder
            </summary>
            <param name="folderName">folder name</param>
            <returns>Unread mail count</returns>
        </member>
        <member name="M:OfficeLib.EML.Outlook.UnreadCount(System.Object)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:OfficeLib.EnumSheetPermission">
            <summary>Sheet access permission definition</summary>
        </member>
        <member name="F:OfficeLib.EnumSheetPermission.Read">
            <summary>Read only</summary>
        </member>
        <member name="F:OfficeLib.EnumSheetPermission.Write">
            <summary>Write only</summary>
        </member>
        <member name="F:OfficeLib.EnumSheetPermission.ReadWrite">
            <summary>Readable and writable</summary>
        </member>
        <member name="T:OfficeLib.PageAttribute">
            <summary>
            Attribute settings for reading and writing
            </summary>
        </member>
        <member name="P:OfficeLib.PageAttribute.Permission">
            <summary>Access Permission</summary>
        </member>
        <member name="M:OfficeLib.PageAttribute.#ctor(OfficeLib.EnumSheetPermission)">
            <summary>Constructor</summary>
        </member>
        <member name="M:OfficeLib.Comm.ContainsBitFlag(System.UInt32,System.Int32)">
            <summary>
            Is it an value containing bit
            </summary>
            <param name="value">value</param>
            <param name="bit">bit</param>
        </member>
        <member name="M:OfficeLib.Comm.Contains``1(``0[],``0)">
            <summary>
            Is it an array containing keys
            </summary>
            <param name="values">value</param>
            <param name="key">key</param>
        </member>
        <member name="M:OfficeLib.Comm.IsNullOrEmpty(System.String)">
            <summary>
            String is null or empty
            </summary>
            <param name="value">value</param>
        </member>
        <member name="T:OfficeLib.ConvertExtention">
            <summary>Extended function class for type conversion</summary>
        </member>
        <member name="M:OfficeLib.ConvertExtention.To``1(System.Object)">
            <summary>
            Type Conversion
            </summary>
            <typeparam name="TOutput">Type after conversion</typeparam>
            <param name="value">Value of conversion source</param>
        </member>
        <member name="M:OfficeLib.ConvertExtention.To(System.Object,System.Type)">
            <summary>
            Type Conversion
            </summary>
            <param name="value">Value of conversion source</param>
            <param name="type">Type after conversion</param>
            <remarks>Cast of return value required</remarks>
        </member>
        <member name="M:OfficeLib.ConvertExtention.TryTo``1(System.Object)">
            <summary>
            Type Conversion (Perform exception handling)
            </summary>
            <typeparam name="TOutput">Type after conversion</typeparam>
            <param name="value">Value of conversion source</param>
        </member>
        <member name="M:OfficeLib.ConvertExtention.TryTo(System.Object,System.Type)">
            <summary>
            Type Conversion (Perform exception handling)
            </summary>
            <param name="value">Value of conversion source</param>
            <param name="type">Type after conversion</param>
            <remarks>Cast of return value required</remarks>
        </member>
        <member name="M:OfficeLib.ConvertExtention.ConvertAll``2(System.Collections.Generic.IEnumerable{``0})">
            <summary>Type Conversion of Arrays</summary>
            <typeparam name="TInput">Type of conversion source</typeparam>
            <typeparam name="TOutput">Type after conversion</typeparam>
            <param name="values">Value of conversion source</param>
        </member>
        <member name="M:OfficeLib.ConvertExtention.ConvertAll``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>Type Conversion of Jag Arrays</summary>
            <typeparam name="TInput">Type of conversion source</typeparam>
            <typeparam name="TOutput">Type after conversion</typeparam>
            <param name="values">Value of conversion source</param>
        </member>
        <member name="M:OfficeLib.ConvertExtention.ToObject``1(``0[])">
            <summary>
            Convert an array to an object type
            </summary>
            <typeparam name="T">Type of conversion source</typeparam>
            <param name="src">Value of conversion source</param>
        </member>
        <member name="M:OfficeLib.ConvertExtention.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Enumerable to array
            </summary>
        </member>
        <member name="T:OfficeLib.JagExtention">
            <summary>Extended function class of Jag array</summary>
        </member>
        <member name="M:OfficeLib.JagExtention.OuterJoin``1(``0[][],``0[][])">
            <summary>Outer Join(Include all)</summary>
            <typeparam name="T"></typeparam>
            <param name="srcTable">Table on the right</param>
            <param name="joinTable">Table on the left</param>
            <remarks>
            Combine with reference to the more array elements.
            Elements without short arrays are created with default values.
            </remarks>
        </member>
        <member name="M:OfficeLib.JagExtention.InnerJoin``1(``0[][],``0[][])">
            <summary>Outer Join(Common row only)</summary>
            <typeparam name="T"></typeparam>
            <param name="srcTable">Table on the right</param>
            <param name="joinTable">Table on the left</param>
            <remarks>
            Combine with the smaller number of elements of the array as the reference.
            The longer line is truncated.
            </remarks>
        </member>
        <member name="M:OfficeLib.JagExtention.Join``1(``0[][],``0[][],System.Int32)">
            <summary>Outer join with the specified number of rows</summary>
            <typeparam name="T"></typeparam>
            <param name="srcTable">Table on the right</param>
            <param name="joinTable">Table on the left</param>
            <param name="rows">specific number of rows</param>
            <remarks>
            Combine  two tables with the specified number of rows.
            If it exceeds specified line, it creates with default value.
            Trimmed rows are truncated.
            </remarks>
        </member>
        <member name="M:OfficeLib.JagExtention.Union``1(``0[][],``0[][][])">
            <summary>Union</summary>
            <typeparam name="T"></typeparam>
            <param name="srcTable">Table on the top</param>
            <param name="unionTable">Table on the bottom</param>
            <remarks>
            Combine the table to the underside
            Each column is Combined as it is.
            </remarks>
        </member>
        <member name="M:OfficeLib.JagExtention.VDividingArray``1(``0[][],System.Int32)">
            <summary>Split array vertically</summary>
            <typeparam name="T"></typeparam>
            <param name="src">Table</param>
            <param name="dividCount">Division number</param>
        </member>
        <member name="M:OfficeLib.JagExtention.HDividingArray``1(``0[][],System.Int32)">
            <summary>Split array horizontally</summary>
            <typeparam name="T"></typeparam>
            <param name="src">Table</param>
            <param name="divid">Division number</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ColumnRemoveStart``1(``0[][],System.Int32)">
            <summary>Remove the specified number of columns from the first column</summary>
            <typeparam name="T"></typeparam>
            <param name="src">Table</param>
            <param name="trimCount">Number of columns to delete</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ColumnRemoveEnd``1(``0[][],System.Int32)">
            <summary>Remove the specified number of columns from the last column</summary>
            <typeparam name="T"></typeparam>
            <param name="src">Table</param>
            <param name="trimCount">Number of columns to delete</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ToRectArray``1(``0[][])">
            <summary>
            Convert to rectangular array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">Jag Array</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ToRectLikeJagArray``1(``0[][])">
            <summary>
            Align horizontal width of jag array like rectangular array
            </summary>
            <param name="src">Jag Array</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ToJagArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Convert a one-dimensional array to a two-dimensional array
            </summary>
            <param name="src">Array</param>
            <param name="divCount">Element count(Row count)</param>
            <remarks>
            Specify a divisible number of one-dimensional elements.
            Truncated decimal places are truncated.
            </remarks>
        </member>
        <member name="M:OfficeLib.JagExtention.ToJagArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert an enumeration enumeration to a two-dimensional array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">Enumeration enumeration</param>
            <returns>Jag Array</returns>
        </member>
        <member name="M:OfficeLib.JagExtention.ToSingleArray``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Convert two-dimensional array to one-dimensional array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">Enumeration enumeration</param>
        </member>
        <member name="M:OfficeLib.JagExtention.TakeVertical``1(``0[][],System.Int32)">
            <summary>
            Extract values vertically from the table
            </summary>
        </member>
        <member name="M:OfficeLib.JagExtention.RangeTake``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Acquire the specified range value from the table
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">Table</param>
            <param name="top">Start row</param>
            <param name="bottom">End row</param>
            <param name="left">Start column</param>
            <param name="right">End column</param>
        </member>
        <member name="M:OfficeLib.JagExtention.ColumnsMax``1(``0[][])">
            <summary>Get maximum length in Table</summary>
            <param name="src">Table</param>
        </member>
        <member name="M:OfficeLib.JagExtention.SkipTake``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Extract specified range element from specified position in array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="src">Array</param>
            <param name="skip">Length to skip</param>
            <param name="length">Length to take</param>
        </member>
        <member name="T:OfficeLib.InvokeExtention">
            <summary>Reflection InvokeMember extention class</summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.Method(System.Object,System.String)">
            <summary>
            Invoke Method extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.Method(System.Object,System.String,System.Object[])">
            <summary>
            Invoke Method extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.Method(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Invoke Method extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.Method(System.Object,System.String,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Invoke Method extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.GetProperty(System.Object,System.String)">
            <summary>
            Invoke Getproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.GetProperty(System.Object,System.String,System.Object[])">
            <summary>
            Invoke Getproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.GetProperty(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Invoke Getproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.GetProperty(System.Object,System.String,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Invoke Getproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.SetProperty(System.Object,System.String)">
            <summary>
            Invoke Setproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.SetProperty(System.Object,System.String,System.Object[])">
            <summary>
            Invoke Setproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.SetProperty(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Invoke Setproperty extention
            </summary>
        </member>
        <member name="M:OfficeLib.InvokeExtention.SetProperty(System.Object,System.String,System.Reflection.Binder,System.Object,System.Object[])">
            <summary>
            Invoke Setproperty extention
            </summary>
        </member>
        <member name="T:OfficeLib.OfficeCore">
            <summary>Microsoft Office application class</summary>
            <remarks>Excel, Word, PowerPoint</remarks>
        </member>
        <member name="F:OfficeLib.OfficeCore.OBJECT_SHAPES">
            <summary>Command of Shapes</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_OPEN">
            <summary>Command of Open</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_SAVE">
            <summary>Command of Save</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_SAVE_AS">
            <summary>Command of Save as</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_CLOSE">
            <summary>Command of Close</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_QUIT">
            <summary>Command of Quit</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.METHOD_ADD">
            <summary>Command of Add</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.COMMAND_COPY">
            <summary>Command of Copy</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.COMMAND_CUT">
            <summary>Command of Cut</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.COMMAND_PASTE">
            <summary>Command of Paste</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_VERSION">
            <summary>Version</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_COUNT">
            <summary>count</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_ITEM">
            <summary>Item</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_ITEMS">
            <summary>Items</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_NAME">
            <summary>Name</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_LEFT">
            <summary>Left</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_TOP">
            <summary>Top</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_PATH">
            <summary>Path</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_SAVED">
            <summary>Saved</summary>
        </member>
        <member name="F:OfficeLib.OfficeCore.PROP_DISP_ALERT">
            <summary>Display alert</summary>
        </member>
        <member name="P:OfficeLib.OfficeCore.ApplicationID">
            <summary>Application ID</summary>
        </member>
        <member name="P:OfficeLib.OfficeCore.Path">
            <summary>File path of this application</summary>
            <remarks>
            Must set full path
            </remarks>
        </member>
        <member name="P:OfficeLib.OfficeCore.Application">
            <summary>Application resource</summary>
        </member>
        <member name="P:OfficeLib.OfficeCore.WorkArea">
            <summary>Work area</summary>
        </member>
        <member name="P:OfficeLib.OfficeCore.Version">
            <summary>Version of Application</summary>
        </member>
        <member name="M:OfficeLib.OfficeCore.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="appID">Application ID</param>
        </member>
        <member name="M:OfficeLib.OfficeCore.CreateApplication">
            <summary>
            Create Application
            </summary>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.OfficeCore.Open(System.String)">
            <summary>Open Application</summary>
            <param name="filePath">Application path</param>
            <returns>Success(true) or failure(false) of execution</returns>
        </member>
        <member name="M:OfficeLib.OfficeCore.Dispose">
            <summary> Dispose </summary>
            <remarks>Own 'Close' method calling.</remarks>
        </member>
        <member name="M:OfficeLib.OfficeCore.Close">
            <summary>Close aplication</summary>
            <remarks>
            It must be done at the end.
            If not called, the process will keep capturing the file.
            (Especially Excel!)
            </remarks>
        </member>
        <member name="M:OfficeLib.OfficeCore.ReleaseObject(System.Object)">
            <summary>
            Resource release
            </summary>
            <param name="target">Target object</param>
        </member>
        <member name="M:OfficeLib.OfficeCore.ReleaseObjects(System.Object[])">
            <summary>
            Resources release
            </summary>
            <param name="targets">List of target object</param>
        </member>
        <member name="M:OfficeLib.OfficeCore.QuitAplication">
            <summary>Quit Application</summary>
        </member>
        <member name="T:OfficeLib.PPT.PowerPoint">
            <summary>PowerPoint class</summary>
        </member>
        <member name="F:OfficeLib.PPT.PowerPoint.PROG_ID">
            <summary>Application object ID</summary>
        </member>
        <member name="F:OfficeLib.PPT.PowerPoint.OBJECT_PRESENTATIONS">
            <summary>Presentations object ID</summary>
        </member>
        <member name="P:OfficeLib.PPT.PowerPoint.Presentation">
            <summary>Presentation object</summary>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.Open(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.New(System.String)">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.Save">
            <summary>Save</summary>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.SaveAs(System.String)">
            <summary>Save As</summary>
            <param name="savePath">Seve path</param>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="M:OfficeLib.PPT.PowerPoint.ClosePresentation">
            <summary>
            Close Presentation
            </summary>
        </member>
    </members>
</doc>
